---
- name: Enable cgroup via boot commandline if not already enabled for Ubuntu on a Raspberry Pi
  lineinfile:
    path: /boot/firmware/cmdline.txt
    backrefs: yes
    regexp: '^((?!.*\bcgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory\b).*)$'
    line: '\1 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory'
  notify: reboot

- name: Enable IPv4 forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: yes

- name: Enable IPv6 forwarding
  sysctl:
    name: net.ipv6.conf.all.forwarding
    value: "1"
    state: present
    reload: yes

- name: Wait for cloud-init / user-data to finish
  command: cloud-init status --wait
  changed_when: false

# Update and install the base software
- name: Update apt package cache
  apt:
    update_cache: yes
    cache_valid_time: 600
    upgrade: dist
  register: upgrade

- name: Ensure that these software packages are installed
  apt:
    pkg:
      - fail2ban
      - pwgen
      - needrestart
      - sudo
    state: latest

- name: Check if a reboot is needed for Debian-based systems
  stat:
    path: /var/run/reboot-required
  register: reboot_required

# Host Setup
- name: Set static hostname
  hostname:
    name: "{{ inventory_hostname_short }}"

- name: Add FQDN to /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '^127\.0\.1\.1'
    line: '127.0.1.1    {{ inventory_hostname }} {{ inventory_hostname_short }}'
    state: present

- name: set timezone
  timezone:
    name: "{{ tmzone }}"

- name: Set ssh port port number
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: 'Port '
    line: 'Port {{ ssh_port }}'
    state: present
  notify:
    - restart sshd

# Set sudo password timeout (default is 15 minutes)
- name: Set sudo password timeout.
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^Defaults\tenv_reset'
    line: 'Defaults env_reset, timestamp_timeout={{ sudo_timeout }}'
    validate: '/usr/sbin/visudo -cf %s'

- name: Create/update regular user with sudo privileges
  user:
    name: "{{ user }}"
    password: "{{ user_hashed_passwd }}"
    state: present
    groups: [sudo]
    append: true
    shell: /bin/bash

- name: Set user PS1 to a two-line prompt
  lineinfile:
    dest: "/home/{{ user }}/.bashrc"
    insertafter: EOF
    line: "PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\n\\$ '"
    state: present

- name: Set root PS1 to a two-line prompt
  lineinfile:
    path: '/root/.bashrc'
    state: present
    insertafter: EOF
    line: PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\n\$ '

- name: Ensure authorized keys for remote user is installed
  authorized_key:
    user: "{{ user }}"
    state: present
    key: "{{ ssh_pub_key }}"

- name: Ensure authorized key for root user is installed
  authorized_key:
    user: root
    state: present
    key: "{{ ssh_pub_key }}"

- name: Disable password authentication for root
  lineinfile:
    path: /etc/ssh/sshd_config
    state: present
    regexp: '^#?PermitRootLogin'
    line: 'PermitRootLogin prohibit-password'
  notify:
    - restart sshd

- name: Disable tunneled clear-text passwords
  lineinfile:
    path: /etc/ssh/sshd_config
    state: present
    regexp: '^#?PasswordAuthentication'
    line: 'PasswordAuthentication no'
  notify:
    - restart sshd

# Configure a firewall
- name: Allow ssh port '{{ ssh_port }}'
  ufw:
    rule: allow
    port: '{{ ssh_port }}'
    proto: tcp
    state: enabled
    
- name: Allow k3s port '{{ k3s_port }}'
  ufw:
    rule: allow
    port: '{{ k3s_port }}'
    proto: tcp
    state: enabled

- name: Turn UFW logging off
  ufw:
    logging: "off"

- name: configure fail2ban for ssh
  copy:
    dest: /etc/fail2ban/jail.local
    content: "{{ f2b_jail_local }}"
  notify:
    - restart fail2ban

# simple shell script to display fail2ban-client status info; usage:
#   f2bst
#   f2bst sshd
- name: Configure f2bst

  copy:
    dest: /usr/local/bin/f2bst
    content: |
      #!/usr/bin/sh
      fail2ban-client status $*
    owner: root
    group: root
    mode: 0750

- name: run needrestart
  command: needrestart -r a
  when: upgrade.changed

- name: Reboot the server if needed
  reboot:
    msg: "Reboot initiated by Ansible because of reboot required file."
    connect_timeout: 5
    reboot_timeout: 600
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: whoami
  when: reboot_required.stat.exists

- name: Remove old packages from the cache
  apt:
    autoclean: yes

- name: Remove dependencies that are no longer needed
  apt:
    autoremove: yes
    purge: yes

- name: Install docker and docker compose
  include_tasks: install_docker.yml

- name: Add user to docker group
  user:
    append: yes
    name: "{{ user }}"
    groups:
      - docker